# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import mitmpiping_pb2 as mitmpiping__pb2


class MitmProxyBrokerStub(object):
    """MitmProxyBroker负责启动mitmproxy和通知回调client端
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.start = channel.unary_unary(
                '/mitmpiping.MitmProxyBroker/start',
                request_serializer=mitmpiping__pb2.MitmproxyStartRequest.SerializeToString,
                response_deserializer=mitmpiping__pb2.ResultResponse.FromString,
                )
        self.stop = channel.unary_unary(
                '/mitmpiping.MitmProxyBroker/stop',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=mitmpiping__pb2.ResultResponse.FromString,
                )


class MitmProxyBrokerServicer(object):
    """MitmProxyBroker负责启动mitmproxy和通知回调client端
    """

    def start(self, request, context):
        """启动mitmproxy的命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """停止mitmproxy的命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MitmProxyBrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=mitmpiping__pb2.MitmproxyStartRequest.FromString,
                    response_serializer=mitmpiping__pb2.ResultResponse.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=mitmpiping__pb2.ResultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mitmpiping.MitmProxyBroker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MitmProxyBroker(object):
    """MitmProxyBroker负责启动mitmproxy和通知回调client端
    """

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitmpiping.MitmProxyBroker/start',
            mitmpiping__pb2.MitmproxyStartRequest.SerializeToString,
            mitmpiping__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitmpiping.MitmProxyBroker/stop',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            mitmpiping__pb2.ResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MitmProxyCallbackStub(object):
    """java回调接口，它接收mitmproxy-piping转发的mitmproxy流量的回调，修改后返回给mitmproxy-piping
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.onMitmRequest = channel.unary_unary(
                '/mitmpiping.MitmProxyCallback/onMitmRequest',
                request_serializer=mitmpiping__pb2.MitmRequest.SerializeToString,
                response_deserializer=mitmpiping__pb2.MitmRequest.FromString,
                )
        self.onMitmResponse = channel.unary_unary(
                '/mitmpiping.MitmProxyCallback/onMitmResponse',
                request_serializer=mitmpiping__pb2.MitmResponse.SerializeToString,
                response_deserializer=mitmpiping__pb2.MitmResponse.FromString,
                )


class MitmProxyCallbackServicer(object):
    """java回调接口，它接收mitmproxy-piping转发的mitmproxy流量的回调，修改后返回给mitmproxy-piping
    """

    def onMitmRequest(self, request, context):
        """监控处理请求的接口，mitmproxy在监控流量请求时调用此java接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def onMitmResponse(self, request, context):
        """监控处理响应的接口，mitmproxy在监控流量响应时调用此java接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MitmProxyCallbackServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'onMitmRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.onMitmRequest,
                    request_deserializer=mitmpiping__pb2.MitmRequest.FromString,
                    response_serializer=mitmpiping__pb2.MitmRequest.SerializeToString,
            ),
            'onMitmResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.onMitmResponse,
                    request_deserializer=mitmpiping__pb2.MitmResponse.FromString,
                    response_serializer=mitmpiping__pb2.MitmResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mitmpiping.MitmProxyCallback', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MitmProxyCallback(object):
    """java回调接口，它接收mitmproxy-piping转发的mitmproxy流量的回调，修改后返回给mitmproxy-piping
    """

    @staticmethod
    def onMitmRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitmpiping.MitmProxyCallback/onMitmRequest',
            mitmpiping__pb2.MitmRequest.SerializeToString,
            mitmpiping__pb2.MitmRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def onMitmResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mitmpiping.MitmProxyCallback/onMitmResponse',
            mitmpiping__pb2.MitmResponse.SerializeToString,
            mitmpiping__pb2.MitmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
